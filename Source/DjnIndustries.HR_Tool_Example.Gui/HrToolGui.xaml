<!--
    MVVM takes part in this user interface, which allows to bind properties to attributes of controls.
    This window is not attached to any data source. The source of data will be set in the App.xaml.cs of DjnIndustries.HR_Tool_Example.App
    in shape of a view model.

    MVVM: https://docs.microsoft.com/en-us/archive/msdn-magazine/2009/february/patterns-wpf-apps-with-the-model-view-viewmodel-design-pattern

    In the window element were several attributes set, which includes libraries and name spaces
    or referencing data from the view model.
    Look up the monstrous topic called 'XAML' yourself...
    GLHF -> https://docs.microsoft.com/en-us/dotnet/desktop/wpf/xaml/?view=netdesktop-6.0
-->
<Window x:Class="DjnIndustries.HR_Tool_Example.Gui.HrToolGui"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        mc:Ignorable="d"
        Title="{Binding Title}"
        Height="500" Width="500">

    <!-- The grid element is the frame of all controls which were displayed later in the application. -->
    <Grid>
        <!--
            Here were columns and rows defined for the grid,
            to divide and control the sections of the application.
            Especially if the window will be resized, it is to make
            sure, that all controls that were placed in the user interface,
            wont be covered by any other control or thrown out of the window boundaries.

            Grids can be stacked inside another.
        -->
        <Grid.ColumnDefinitions>
            <!-- * is one part of the width -->
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>

        <Grid.RowDefinitions>
            <!-- * is one part of the Height -->
            <RowDefinition Height="30" />
            <RowDefinition Height="25" />
            <RowDefinition Height="*" />
            <RowDefinition Height="25" />
        </Grid.RowDefinitions>

        <!--
            A DockPanel is a great control for assigning a control to a side,
            so that the whole place between controls is filled as best as possible.
        -->
        <DockPanel>
            <Label Content="Employee count:"
               DockPanel.Dock="Left"
               FontSize="11" />
            <Label Content="{Binding EmployeeCount}"
                   d:Content="100"
               DockPanel.Dock="Right"
               FontSize="11" />
        </DockPanel>

        <DockPanel Grid.Column="1">
            <Label Content="Average salary:"
               DockPanel.Dock="Left"
               FontSize="11" />
            <Label Content="{Binding AverageSalary}"
                   d:Content="1000"
               DockPanel.Dock="Right"
               FontSize="11" />
        </DockPanel>

        <!--
            A button is a well known control, which executes a bound command.
        -->
        <Button Content="Add"
                Grid.Row="1"
                Command="{Binding AddCommand}" />

        <Button Content="Edit"
                Grid.Row="1" Grid.Column="1"
                Command="{Binding EditCommand}"
                IsEnabled="{Binding EditEnabled}" />

        <Button Content="Remove"
                Grid.Row="1" Grid.Column="2"
                Command="{Binding RemoveCommand}"
                IsEnabled="{Binding RemoveEnabled}" />

        <!--
            A DataGrid is a kind of table which allows to select and edit entries.
            https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.datagrid?view=windowsdesktop-6.0

            The data source called "ItemSource" will be bound to a ObservableCollection of the type Employee in the view model.
            Also the currently selected item will be bound to a property in the view model.
        -->
        <DataGrid AutoGenerateColumns="False"
                  CanUserAddRows="False" CanUserDeleteRows="False" CanUserResizeRows="False"
                  CanUserReorderColumns="False" CanUserSortColumns="False" CanUserResizeColumns="False"
                  HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto"
                  SelectionMode="Single"
                  Grid.Row="2"
                  Grid.ColumnSpan="3"
                  ItemsSource="{Binding Employees}"
                  SelectedItem="{Binding SelectedEmployee}"
                  SelectionChanged="DataGrid_SelectionChanged"
                  MouseDoubleClick="DataGrid_MouseDoubleClick">
            <DataGrid.Columns>
                <!--
                    The DataGridTemplateColumn will be the headers displayed at the top of the DataGrid.
                    Alternatively other allowed DataGridTemplate elements can be placed here.
                    But doing it this way will enable us to place more complex controls in it,
                    it simply gives more control and possibilities.
                -->
                <DataGridTemplateColumn Header="First name" Width="*" IsReadOnly="True">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <Label Content="{Binding Path=FirstName}"
                                   VerticalAlignment="Center"
                                    Margin="5 0 0 0" />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>

                <DataGridTemplateColumn Header="Last name"
                                        Width="*"
                                        IsReadOnly="True">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <Label Content="{Binding Path=LastName}"
                                   VerticalAlignment="Center"
                                    Margin="5 0 0 0" />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>

                <DataGridTemplateColumn Header="Date of hire"
                                        Width="*"
                                        IsReadOnly="True">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <Label Content="{Binding Path=DateOfHire}"
                                   VerticalAlignment="Center"
                                    Margin="5 0 0 0" />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>

                <DataGridTemplateColumn Header="Salary"
                                        Width="*"
                                        IsReadOnly="True">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <Label Content="{Binding Path=Salary}"
                                   VerticalAlignment="Center"
                                   Margin="5 0 0 0" />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
            </DataGrid.Columns>
        </DataGrid>

        <Label Content="{Binding ApplicationVersion}"
                Grid.Row="3"
                d:Content="v 0.0.0"
                FontSize="11" />

        <Label Content="by David Nübel (DJN Industries)"
               Grid.Row="3" Grid.Column="2"
               FontSize="11" />
    </Grid>
</Window>